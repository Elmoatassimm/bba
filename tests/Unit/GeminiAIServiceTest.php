<?php

namespace Tests\Unit;

use App\Services\AI\GeminiAIService;
use Exception;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Http;
use Tests\TestCase;

class GeminiAIServiceTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp();

        // Set a fake API key for testing
        Config::set('services.gemini.api_key', 'fake-api-key');
    }

    public function test_gemini_service_initialization()
    {
        $service = new GeminiAIService();
        $this->assertInstanceOf(GeminiAIService::class, $service);
    }

    public function test_gemini_service_throws_exception_without_api_key()
    {
        // Remove the API key
        Config::set('services.gemini.api_key', '');

        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Gemini API key is not set');

        new GeminiAIService();
    }

    public function test_gemini_service_calls_api_correctly()
    {
        // Mock the HTTP facade
        Http::fake([
            '*' => Http::response([
                'candidates' => [
                    [
                        'content' => [
                            'parts' => [
                                [
                                    'text' => 'This is a test summary generated by Gemini AI.'
                                ]
                            ]
                        ]
                    ]
                ]
            ], 200)
        ]);

        // Create a temporary PDF file
        $tempFile = tempnam(sys_get_temp_dir(), 'test_pdf_');
        file_put_contents($tempFile, 'Test PDF content');

        // Call the service
        $service = new GeminiAIService();
        $summary = $service->summarizePdf($tempFile);

        // Verify the HTTP request was made correctly
        Http::assertSent(function ($request) {
            return $request->url() === 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=fake-api-key' &&
                   $request->method() === 'POST' &&
                   isset($request->data()['contents']) &&
                   isset($request->data()['generationConfig']);
        });

        // Verify the summary
        $this->assertEquals('This is a test summary generated by Gemini AI.', $summary);

        // Clean up
        unlink($tempFile);
    }

    public function test_gemini_service_handles_api_error()
    {
        // Mock the HTTP facade to return an error
        Http::fake([
            '*' => Http::response([
                'error' => [
                    'code' => 400,
                    'message' => 'Invalid API key'
                ]
            ], 400)
        ]);

        // Create a temporary PDF file
        $tempFile = tempnam(sys_get_temp_dir(), 'test_pdf_');
        file_put_contents($tempFile, 'Test PDF content');

        // Call the service and expect an exception
        $service = new GeminiAIService();

        $this->expectException(Exception::class);
        $service->summarizePdf($tempFile);

        // Clean up
        unlink($tempFile);
    }

    public function test_gemini_service_handles_unexpected_response_format()
    {
        // Mock the HTTP facade to return an unexpected format
        Http::fake([
            '*' => Http::response([
                'unexpected_format' => true
            ], 200)
        ]);

        // Create a temporary PDF file
        $tempFile = tempnam(sys_get_temp_dir(), 'test_pdf_');
        file_put_contents($tempFile, 'Test PDF content');

        // Call the service and expect an exception
        $service = new GeminiAIService();

        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Unexpected response format');
        $service->summarizePdf($tempFile);

        // Clean up
        unlink($tempFile);
    }
}
